APM project 

su -
apt update
apt install Prometheus 
service Prometheus status 
service Prometheus start 
#open Prometheus port -> 9090 in AWS security group add inbound rule 
#check GUI in browser ->  IP:9090
#Need PomQL for metrics
#if needed to monitor other instances, then we need to configure IP, jobnames in YML /etc/prometheus/prometheus.yml in scrape_configurations (be cautious while editing yml file).
#download Grafana oss open source service from browser.
sudo apt-get install -y adduser libfontconfig1 musl
wget https://dl.grafana.com/oss/release/grafana_11.5.1_amd64.deb
sudo dpkg -i grafana_11.5.1_amd64.deb
sudo /bin/systemctl daemon-reload
sudo /bin/systemctl enable grafana-server
sudo systemctl start grafana-server
sudo systemctl start grafana-server
#check GUI in browser ->  IP:3000
#to fetch data we need to add data source navigate as below 
#dashboard-> collections --> Add new collection --> Prometheus--> (top right corner) Add New Data source
#now after clicking on add new dashboard we need to specify from where the data should be fetched 
#go to settings-->specify ip:port --> http://<IP of Prometheus instance>:9090 --> click on save&test. 
#Now we will be able to create dashboards.
#Go to dashboards besides settings and import available dashboards if needed, we can also import dashboards from Grafana/dashboards from browser.
#refresh the page. 

###############################################################################################################################################################################

#Now we are going to create AWS instances and configure node exporter in that and pull all the metrics from node exporter to prometheus and then visualize it in Grafana. 
#to automate installation of node exporter in every machine we create, we can just put below code in advanced setting in AWS while creating instances.

#!/bin/bash
# Update package list
sudo apt update

# Install Node Exporter
sudo apt install -y prometheus-node-exporter

# Start and enable Node Exporter service
sudo systemctl start prometheus-node-exporter
sudo systemctl enable prometheus-node-exporter

#we need to edit Prometheus.yml file to fetch data from every instance we cerate, be cautious while editing yml file.  

- job_name: "ApplicationServerMetrics"
  scrape_interval: 5s
  static_configs:
         - targets: ["54.224.216.179:9100"]


#Cloud Native Computing Foundation handles both Kubernetes and Prometheus.

##########################################################################################################################################################################################

#Now we are going to install and configure apache web server and apache_exporter to fetch data from apache and push it to Prometheus and from Grafana we will be able to visualize.
#we can connect to ec2 instance from browser too if key not present 
#go to connect --> Connect using EC2 Instance Connect

##Install Apache web server
apt update
apt -y install apache2
service apache2 restart

#Edit configuration on /etc/apache2/apache2.conf

ExtendedStatus On 
<Location /server-status> 
SetHandler server-status 
</Location> 

VERSION=0.11.0 
APACHE_USER_GROUP=apache 
APACHE_USER=apache 
#(ARM Architecture in case of windows /Change to AMD in case of linux Servers)
wget https://github.com/Lusitaniae/apache_exporter/releases/download/v$VERSION/apache_exporter-$VERSION.linux-amd64.tar.gz
https://github.com/Lusitaniae/apache_exporter/releases/download/v1.0.8/apache_exporter-1.0.8.linux-amd64.tar.gz

tar xvzf apache_exporter-$VERSION.linux-amd64.tar.gz
chmod +x ./apache_exporter-0.11.0.linux-amd64/apache_exporter 
./apache_exporter-0.11.0.linux-amd64/apache_exporter --scrape_uri=http://localhost/server-status?auto --insecure --telemetry.address=:9117 --telemetry.endpoint=/metrics > /dev/null 2>&1 &

#Now we can create custom dashboard as needed or we can also import dashboard for apache from Grafana.com

############################################################################################################################################################################################

#Now we are going to create MySQL instance/service using docker image and configure it with sql exporter and pell data to Prometheus and Grafana.
apt install docker.io
#Deploy MySQL COntainer

docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Mysql123 -d mysql


#Go inside container and run SQL statement to create a MySQL user.
docker exec -it mysql bash
mysql -u root -p

CREATE USER 'exporter'@'localhost' IDENTIFIED BY 'password' WITH MAX_USER_CONNECTIONS 3; 
GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost'; 
quit; 
exit 

 

 

#Install MySQL Exporter(ARM Architecture in case of windows /Change to AMD in case of linux Servers)

wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.15.1/mysqld_exporter-0.15.1.linux-amd64.tar.gz

tar xvfz mysqld_exporter-0.15.1.linux-amd64.tar.gz

 

mv mysqld_exporter-0.15.1.linux-amd64/mysqld_exporter /usr/local/bin/

nano /etc/.mysqld_exporter.cnf

 

#Add the following content:
[client]
user=exporter
password=password
host=localhost

 

sudo nano /etc/systemd/system/mysqld_exporter.service

 

#Add the following content:
[Unit]
Description=Prometheus MySQL Exporter
After=network.target

[Service]
User=nobody
ExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf /etc/.mysqld_exporter.cnf

[Install]
WantedBy=multi-user.target

 
#Reload systemd and start the service:
sudo systemctl daemon-reload

sudo systemctl start mysqld_exporter

sudo systemctl enable mysqld_exporter

#Verify that MySQL Exporter is running:
sudo systemctl status mysqld_exporter  
############################################################################################################################################################################################

